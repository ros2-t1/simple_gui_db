Project HANA_Robot_System {
  database_type: 'PostgreSQL'
  Note: 'HANA 로봇 시스템 - 의료/요양 시설 자율 로봇 서비스'
}

// ------------------------
// 입소자/거주자 정보 (Interface Specification 우선)
// ------------------------
Table residents {
  resident_id integer [pk, increment]
  name varchar(50) [not null]
  gender char(1) [not null, note: 'M or F']
  birth_date date [not null]
  assigned_room_id integer
  service_station_id integer [ref: > locations.location_id]
  login_id varchar(50) [unique, not null]
  password varchar(255) [not null, default: 'crypt hash']
  is_admin boolean [note: 'Admin flag from interface specification']
}

// ------------------------
// HANA 로봇 정보 (Interface Specification 우선)
// ------------------------
Table hana_bots {
  hana_bot_id integer [pk, increment]
  bot_name varchar(50) [unique, not null]
  battery integer
  status varchar [note: '충전중, 작업중, 대기중, 복귀중']
  current_coordinates double_precision_array [note: '[x, y, z] coordinates from interface spec']
}

// ------------------------
// 위치 정보 (Interface Specification 기준)
// ------------------------
Table locations {
  location_id integer [pk, increment]
  location_type varchar [not null, note: '서비스 스테이션, 픽업 스테이션, 충전 스테이션, 선반']
  location_name varchar(100) [unique, not null]
  coordinates double_precision_array [not null, note: '[x, y, z] coordinates']
}

// ------------------------
// 물품 정보 (Interface Specification 우선)
// ------------------------
Table items {
  item_id integer [pk, increment]
  item_type varchar [not null, note: '물, 영양제, 생필품, 식판']
  item_quantity integer [not null, default: 100]
}

// ------------------------
// 작업 정보 (Interface Specification 기준)
// ------------------------
Table tasks {
  task_id integer [pk, increment]
  task_type varchar [not null, note: '배달, 호출']
  status varchar [not null, note: '대기, 할당, 집기중, 이동중, 수령대기, 완료, 실패']
  requester_resident_id integer [ref: > residents.resident_id]
  item_id integer [ref: > items.item_id, note: 'null for 호출 tasks']
  target_location_id integer [ref: > locations.location_id, note: 'destination for 배달, requester service_station for 호출']
  source_reserved_task_id integer [ref: > reserved_tasks.reserved_task_id, note: 'null for immediate tasks']
  assigned_bot_id integer [ref: > hana_bots.hana_bot_id]
  priority integer [note: 'Task priority for robot assignment']
  message text [note: 'Optional message for 호출 tasks']
  failure_reason varchar [note: 'Reason for task failure']
  created_at timestamp [not null, default: `CURRENT_TIMESTAMP`]
  completed_at timestamp
}

// ------------------------
// 예약 작업 (Interface Specification 기준)
// ------------------------
Table reserved_tasks {
  reserved_task_id integer [pk, increment]
  task_type varchar [not null, note: '식사 배달, 물품 배달']
  requester_resident_id integer [ref: > residents.resident_id]
  item_id integer [ref: > items.item_id]
  target_location integer [ref: > locations.location_id]
  scheduled_time timestamp [not null]
}

// ------------------------
// 로그인 로그 (Interface Specification 기준)
// ------------------------
Table login_logs {
  id integer [pk, increment]
  resident_id integer [ref: > residents.resident_id]
  success boolean
  client_ip varchar(50)
  login_time timestamp [default: `CURRENT_TIMESTAMP`]
}

// ------------------------
// 알림 시스템 (Interface Specification 기준)
// ------------------------
Table notifications {
  notification_id integer [pk, increment]
  recipient_type varchar [not null, note: 'resident, all']
  recipient_id integer [ref: > residents.resident_id, note: 'null for all recipients']
  message text [not null]
  priority varchar [not null, note: 'low, medium, high']
  sent_at timestamp [default: `CURRENT_TIMESTAMP`]
  read_at timestamp
}

// ------------------------
// 인덱스 (성능 최적화)
// ------------------------
Table tasks {
  indexes {
    status [name: 'idx_tasks_status']
    created_at [name: 'idx_tasks_created_at']
  }
}

Table reserved_tasks {
  indexes {
    scheduled_time [name: 'idx_rtasks_sched_time']
  }
}

// ------------------------
// 데이터 흐름 노트
// ------------------------
Note data_flow_delivery: '''
배달 작업 흐름 (Interface Specification 기준):
1. 입소자가 POST /api/tasks/delivery 요청
2. tasks 테이블에 task_type="배달" 생성
3. 로봇이 GET /api/robot/tasks/pending으로 작업 조회
4. 로봇이 POST /api/robot/tasks/{task_id}/accept로 작업 수락
5. 상태 변경: 대기 → 할당 → 집기중 → 이동중 → 수령대기
6. 입소자가 POST /api/tasks/{task_id}/complete로 완료 처리
'''

Note data_flow_call: '''
호출 작업 흐름 (Interface Specification 기준):
1. 입소자가 POST /api/tasks/call 요청 (message 포함 가능)
2. tasks 테이블에 task_type="호출" 생성
3. target_location_id는 입소자의 service_station_id 사용
4. 로봇이 해당 위치로 이동 완료 시 작업 완료
'''

Note data_flow_reserved: '''
예약 작업 흐름 (Interface Specification 기준):
1. 관리자가 POST /api/reserved-tasks로 예약 생성
2. 시스템이 scheduled_time 감지
3. reserved_tasks → tasks로 실제 작업 생성 (source_reserved_task_id 연결)
4. 일반 작업 흐름과 동일하게 처리
'''

Note api_endpoints: '''
주요 API 엔드포인트 (Interface Specification 기준):
- POST /api/login: 로그인
- GET /api/robots/status: 로봇 상태 모니터링 (관리자)
- POST /api/reserved-tasks: 예약 작업 생성 (관리자)
- GET /api/tasks/history: 작업 이력 조회
- POST /api/tasks/delivery: 물품 요청 (입소자)
- POST /api/tasks/call: 로봇 호출 (입소자)
- POST /api/tasks/{task_id}/complete: 작업 완료 처리
- GET /api/locations: 위치 정보 조회
- GET /api/items/inventory: 재고 조회
- WebSocket /ws/monitor: 실시간 모니터링
'''